(define (true? x)
  (not (eq? x false)))
(define (false? x)
  (eq? x false))
;;死循环问题
(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p)
  (list-ref p 1))
(define (procedure-body p)
  (define (scan-out-defines body)
    (define (haveInternalDefine? exps)
      (cond ((null? exps)
	     false)
	    ((definition? (car exps))
	     true)
	    (else (haveInternalDefine? (cdr exps)))))
    (define (extractBindings exps)
      (cond ((null? exps)
	     '())
	    ((definition? (car exps))
	     (cons (list (definition-variable (car exps))
			 '*unassigned*)
		   (extractBindings (cdr exps))))
	    (else (extractBindings (cdr exps)))))
    (define (reshape exps)
      (if (null? exps)
	  '()
	  (if (definition? (car exps))
	      (cons (list 'set!
			  (definition-variable (car exps))
			  (definition-value (car exps)))
		    (reshape (cdr exps)))
	      (cons (car exps)
		    (reshape (cdr exps))))))
    (if (haveInternalDefine? body)
	(make-let (extractBindings body)
		  (reshape body))
	body))
  (scan-out-defines (list-ref p 2)))
(define (procedure-environment p)
  (list-ref p 3))
(define (enclosing-environment env)
  (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (extend-environment vars vals base-env)
  (let ((l1 (length vars))
	(l2 (length vals)))
    (if (= l1 l2)
	(cons (make-frame vars vals)
	      base-env)
	(if (< l1 l2)
	    (error "Too many arguments supplied" vars vals)
	    (error "Too few arguments supplied" vars vals)))))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
	     (env-loop (enclosing-environment env)))
	    ((eq? var (car vars))
					;ex4.16
	     (if (eq? (car vals) '*unassigned*)
		 (error "Unassigned variable" var)
		 (car vals)))
	    (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
	(error "Unbound variable" var)
	(let ((frame (first-frame env)))
	  (scan (frame-variables frame)
		(frame-values frame)))))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
	     (env-loop (enclosing-environment env)))
	    ((eq? var (car vars))
	     (set-car! vals val))
	    (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
	(error "Unbound variable -- SET!" var)
	(let ((frame (first-frame env)))
	  (scan (frame-variables frame)
		(frame-values frame)))))
  (env-loop env))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
	     (add-binding-to-frame! var val frame))
	    ((eq? var (car vars))
	     (set-car! vals val))
	    (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
	  (frame-values frame))))
					;ex4.11
(define (make-frame2 variables values)
  (map cons variables values))
(define (frame-variables2 frame)
  (map car frame))
(define (frame-values2 frame)
  (map cdr frame))
(define (add-binding-to-frame2! var val frame)
  (set! frame (cons (list var val) frame)))
(define (lookup-variable-value2 var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
	     (env-loop (enclosing-environment env)))
	    ((eq? var (caar frame))
	     (cdar frame))
	    (else (scan (cdr frame)))))
    (if (eq? env the-empty-environment)
	(error "Unbound variable" var)
	(scan (first-frame env))))
  (env-loop env))
(define (set-variable-value2! var val env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
	(error "Unbound variable -- SET!" var)
	(let ((pair (assoc var (first-frame env))))
	  (if pair
	      (set-cdr! pair val)
	      (env-loop (enclosing-environment env))))))
  (env-loop env))
					;ex4.12
(define (lookup-binding var env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
	false
	(let ((b (assoc var (first-frame env))))
	  (if b
	      b
	      (env-loop (enclosing-environment env))))))
  (env-loop env))
(define (lookup-variable-value3 var env)
  (let ((b (lookup-binding var env)))
    (if b
	(cdr b)
	(error "Unbound variable" var))))
(define (set-variable-value3! var val env)
  (let ((b (lookup-binding var env)))
    (if b
	(set-cdr! b val)
	(error "Unbound variable -- SET!" var val))))
(define (define-variable3! var val env)
  (let ((b (lookup-binding var (cons (first-frame env)
				     the-empty-environment))))
    (if b
	(set-cdr! b val)
	(add-binding-to-frame! var val (first-frame env)))))
					;ex4.13
(define (eval-unbound exp env)
  (let ((var (cadr exp))
	(frame (first-frame env)))
    (define (scan frame)
      (cond ((null? frame)
	     'nothingHappen)
	    ((eq? var (caar frame))
	     (set-car! frame (cadr frame))
	     (set-cdr! frame (cddr frame)))
	    (else (scan (cdr frame)))))
    (scan frame)))
