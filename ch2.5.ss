(define (add x y)
  (apply-generic 'add x y))

(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number) (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number) (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number) (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number) (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number (lambda (x) (tag x)))
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y)
	 (= x y)))
  (put 'zero? '(scheme-number)
       (lambda (x)
	 (= 0 x)))
  (put 'raise '(scheme-number)
       (lambda (x)
	 (make-rational x 1)))
  'done)

(define (make-scheme-number x)
  ((get 'make 'scheme-number) x))

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (let ((n1 (numer x))
	  (n2 (numer y))
	  (d1 (denom x))
	  (d2 (denom y)))
      (make-rat (+ (* n1 d2) (n2 d1))
		(* d1 d2))))
  (define (sub-rat x y)
    (let ((n1 (numer x))
	  (n2 (numer y))
	  (d1 (denom x))
	  (d2 (denom y)))
      (make-rat (- (* n1 d2) (n2 d1))
		(* d1 d2))))
  (define (mul-rat x y)
    (let ((n1 (numer x))
	  (n2 (numer y))
	  (d1 (denom x))
	  (d2 (denom y)))
      (make-rat (* n1 n2)
		(* d1 d2))))
  (define (div-rat x y)
    (let ((n1 (numer x))
	  (n2 (numer y))
	  (d1 (denom x))
	  (d2 (denom y)))
      (make-rat (* n1 d2)
		(* d1 n2))))
  ;;interface to rest of the system
  (define (tag x)
    (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational (lambda (n d) (tag (make-rat n d))))
  (put 'equ? '(rational rational)
      (lambda (x y)
	(and (= (numer x) (numer y)) (= (denom x) (denom y)))))
  (put 'zero? '(rational)
       (lambda (x)
	 (= 0 (numer x))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (install-complex-package)
					;这两个函数引自哪种类型都可以
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
					;interval procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2)) (+ (imag-part z1) (imag-part z2))))
					;无论z1和z2具体是哪种类型，real-part函数都能正确返回需要的值
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2)) (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
		       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
		       (- (angle z1) (angle z2))))
					;interface to rest of the system
  (define (tag x) (attach-tag 'complex x))
  (put 'add '(complex complex) (lambda (x y) (tag (add-complex x y))))
  (put 'sub '(complex complex) (lambda (x y) (tag (sub-complex x y))))
  (put 'mul '(complex complex) (lambda (x y) (tag (mul-complex x y))))
  (put 'div '(complex complex) (lambda (x y) (tag (div-complex x y))))
  (put 'make-from-real-imag 'complex (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex (lambda (x y) (tag (make-from-mag-ang x y))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'equ? '(complex complex)
       (lambda (x y)
	 (and (= (real-part x) (real-part y)) (= (imag-part x) (imag-part y)))))
  (put 'zero? '(complex)
       (lambda (x)
	 (= 0 (magnitude x))))
  'done)

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))

(define (equ? x y)
  (apply-generic 'equ? x y))
(define (zero? x)
  (apply-generic 'zero? x))

					;ch2.5.3
(define (install-polynomial-package)
  ;;internal procedures
					;representation of poly
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (add-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- ADD-POLY" (list p1 p2))))

  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (mul-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- MUL-POLY" (list p1 p2))))
					;ex2.88
  (define (sub-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (sub-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- SUB-POLY" (list p1 p2))))

					;ex2.91
  (define (div-poly p1 p2)
        (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (div-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- DIV-POLY" (list p1 p2))))

  ;;interface to rest of the system
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(polynomial polynomial)
       (lambda (p1 p2) (tag (sub-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'div '(polynomial polynomial)
       (lambda (p1 p2) (tag (div-poly p1 p2))))
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms))))
					;ex2.87
  (put 'zero? '(polynomial)
       (lambda (p)
	 (empty-termlist? (term-list p))))
  'done)

(define (add-terms l1 l2)
  (cond ((empty-termlist? l1) l2)
	((empty-termlist? l2) l1)
	(else
	 (let ((t1 (first-term l1))
	       (t2 (first-term l2)))
	   (cond ((> (order t1) (order t2)) (adjoin-term t1 (add-terms (rest-terms l1) l2)))
		 ((< (order t1) (order t2)) (adjoin-term t2 (add-terms l1 (rest-terms l2))))
		 (else (adjoin-terms (make-term (order t1) (add (coeff t1) (coeff t2)))
				     (add-terms (rest-terms l1) (rest-terms l2)))))))))

(define (reverse l)
  (map (lambda (term)
	 (make-term (order term) (- (coeff term))))
       l))

(define (sub-terms l1 l2)
  (add-terms l1 (reverse l2)))
   
(define (mul-terms l1 l2)
  (if (empty-termlist? l1)
      (the-empty-termlist)
      (add-terms (mul-term-by-all-terms (first-term l1) l2)
		 (mul-terms (rest-terms l1) l2))))

(define (mul-term-by-all-terms t1 l)
  (if (empty-termlist? l)
      (the-empty-termlist)
      (let ((t2 (first-term l)))
	(adjoin-terms
	 (make-term (+ (order t1) (order t2))
		    (mul (coeff t1) (coeff t2)))
	 (mul-term-by-all-terms t1 (rest-terms l))))))

(define (adjoin-term term term-list)
  (if (zero? (coeff term))
      term-list
      (cons term term-list)))
(define (the-empty-termlist) '())
(define (first-term term-list) (car term-list))
(define (rest-terms term-list) (cdr term-list))
(define (empty-termlist? term-list) (null? term-list))
(define (make-term order coeff) (list order coeff))
(define (order term) (car term))
(define (coeff term) (cadr term))

(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))

(define (div-terms l1 l2)
  (if (empty-termlist? l1)
      (list (the-empty-termlist) (the-empty-termlist))
      (let ((t1 (first-term l1))
	    (t2 (first-term l2)))
	(if (> (order t2) (order t1))
	    (list (the-empty-termlist) l1)
	    (let ((new-c (div (coeff t1) (coeff t2)))
		  (new-o (- (order t1) (order t2))))
	      (let ((rest-of-result
		     (div-terms (sub-terms l1
					   (mul-term-by-all-terms (make-term new-o new-c)
								  l2))
				l2)))
		(list (adjoin-term (make-term new-o new-c) (car rest-of-result))
		      (cadr rest-of-result))))))))
