(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc)
  (cadr proc))
(define primitive-procedures
  (list (list 'car car)
	(list 'cdr cdr)
	(list 'cons cons)
	(list 'null? null?)
	(list '+ +)
	(list '- - )
	(list '* * )
	(list '/ / )
	(list '= =)
	(list '< <)
	(list '<= <=)
	(list '> >)
	(list '>= >=)
	(list 'display display)
	(list 'newline newline)
					;ex4.14
	;;问题在于，自定义求值器内的proc就以下两种：(procedure args body env), (primitive 原生proc)
	;;而原生map只能处理原生proc。求值器处理s表达式，产生的值基本和原生环境有关且通用
	;;只有proc是自定义求值器独创的形式，不能放出在外围环境处理
	))
(define (install-map! env)
  (eval '(define (map proc l)
	   (if (null? l)
	       '()
	       (cons (proc (car l))
		     (map proc (cdr l)))))
	env))
(define primitive-procedure-names
  (map car primitive-procedures))
(define primitive-procedure-objects
  (map (lambda (proc)
	 (list 'primitive (cadr proc)))
       primitive-procedures))
(define (setup-environment)
  (let ((initial-env (extend-environment primitive-procedure-names
					 primitive-procedure-objects
					 the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    (define-variable! ''() '() initial-env)
    ;;(install-map! initial-env)
    initial-env))
(define the-global-environment (setup-environment))
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme (primitive-implementation proc)
			      args))
;;这句话要放在apply定义前才能保存基本过程apply
;;(define apply-in-underlying-scheme apply)
					;ch4.2.2
(define input-prompt ";;; L-Eval input:")
(define output-prompt ";;; L-Eval value:")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (actual-value input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(define (prompt-for-input string)
  (newline)
  (newline)
  (display string)
  (newline))
(define (announce-output string)
  (newline)
  (display string)
  (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
		     (procedure-parameters object)
		     (procedure-body object)
		     '<procedure-env>))
      (display object)))
