(define (eval3 exp env)
  ((analyze exp) env))
(define (analyze exp)
  (cond ((self-evaluating? exp)
	 (analyze-self-evaluating exp))
	((quoted? exp)
	 (analyze-quoted exp))
	((variable? exp)
	 (analyze-variable exp))
	((assignment? exp)
	 (analyze-assignment exp))
	((definition? exp)
	 (analyze-definition exp))
	((if? exp)
	 (analyze-if exp))
	((lambda? exp)
	 (analyze-lambda exp))
	((begin? exp)
	 (analyze-sequence (begin-actions exp)))
	((cond? exp)
	 (analyze (cond->if exp)))
	((let? exp)
	 (analyze (let->combination exp)))
	((application? exp)
	 (analyze-application exp))
	(else (error "Unknown expression type -- ANALYZE" exp))))
(define (analyze-self-evaluating exp)
  (lambda (env) exp))
(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (lambda (env) qval)))
(define (analyze-variable exp)
  (lambda (env) (lookup-variable-value exp env)))
(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
	(vproc (analyze (assignment-value exp))))
    (lambda (env)
      (set-variable-value! var (vproc env) env)
      'ok)))
(define (analyze-definition exp)
  (let ((var (definition-variable exp))
	(vproc (analyze (definition-value exp))))
    (lambda (env)
      (define-variable! var (vproc env) env)
      'ok)))
(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
	(cproc (analyze (if-consequent exp)))
	(aproc (analyze (if-alternative exp))))
    (lambda (env)
      (if (true? (pproc env))
	  (cproc env)
	  (aproc env)))))
(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
	(bproc (analyze-sequence (lambda-body exp))))
    (lambda (env)
      (make-procedure vars bproc env))))
(define (analyze-sequence exps)
  (define (sequentially proc1 proc2)
    (lambda (env) (proc1 env) (proc2 env)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
	first-proc
	(loop (sequentially first-proc (car rest-procs))
	      (cdr rest-procs))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
	(error "Empty sequence -- ANALYZE"))
    ;;返回的貌似只是最后两个proc构成的lambda，其实是这样的结构：
    ;;(lambda (lambda (...(lambda proc1 proc2) proc3)...) proc[n-1]) proc[n])
    (loop (car procs) (cdr procs))))
(define (analyze-application exp)
  ;;fproc被analyze为lambda，其中body再被analyze-sequence处理
  (let ((fproc (analyze (operator exp)))
	(aprocs (map analyze (operands exp))))
    (lambda (env)
      (execute-application (fproc env)
			   (map (lambda (aproc) (aproc env))
				aprocs)))))
(define (execute-application proc args)
  (cond ((primitive-procedure? proc)
	 (apply-primitive-procedure proc args))
	((compound-procedure? proc)
	 ((procedure-body proc) (extend-environment (procedure-parameters proc)
						    args
						    (procedure-environment proc))))
	(else (error "Unknown procedure type -- EXECUTE-APPLICATION" proc))))
					;ex4.24
(define test1
  '(define (loop n) 
     (if (> n 0) 
         (loop (- n 1))
	 'end)))
;;(eval test1 env)
;;env里多了个binding：(loop (procedure n #compound-procedure env))，其中的复合过程如下
;; (lambda (env)
;;   (if (true? (execute-application (lookup-variable-value '> env)
;; 				  (list (lookup-variable-value 'n env) 0)))
;;       (execute-application (lookup-variable-value 'loop env)
;; 			   (execute-application (lookup-variable-value '- env)
;; 						(list (lookup-variable-value 'n env) 1)))
;;       (text-of-quotation ''end)))
