(define (actual-value exp env)
  (force-it (eval exp env)))
;;eval中传入的procedure是actual-value处理过的，arguments是未处理的表达式形式
(define (apply procedure arguments env)
  (cond ((primitive-procedure? procedure)
	 (apply-primitive-procedure procedure
				    (list-of-arg-values arguments env)))
	((compound-procedure? procedure)
	 (eval-sequence (procedure-body procedure)
			(extend-environment (procedure-parameters procedure)
					    (list-of-delayed-args arguments env)
					    (procedure-environment procedure))))
	(else (error "Unknown procedure type -- APPLY" procedure))))
(define (list-of-arg-values exps env)
  (if (no-operands? exps)
      '()
      (cons (actual-value (first-operand exps) env)
	    (list-of-arg-values (rest-operands exps) env))))
(define (list-of-delayed-args exps env)
  (if (no-operands? exps)
      '()
      (cons (delay-it (first-operand exps) env)
	    (list-of-delayed-args (rest-operands exps)
				  env))))
(define (force-it obj)
  (if (thunk? obj)
      (actual-value (thunk-exp obj) (thunk-env obj))
      obj))
(define (delay-it exp env)
  (list 'thunk exp env))
(define (thunk? obj)
  (tagged-list? obj 'thunk))
(define (thunk-exp thunk)
  (list-ref thunk 1))
(define (thunk-env thunk)
  (list-ref thunk 2))

(define (evaluated-thunk? obj)
  (tagged-list? obj 'evaluated-thunk))
(define (thunk-value evaluated-thunk)
  (list-ref evaluated-thunk 1))
(define (force-it obj)
  (cond ((thunk? obj)
	 (let ((result (actual-value (thunk-exp obj)
				     (thunk-env obj))))
	   (set-car! obj 'evaluated-thunk)
	   (set-car! (cdr obj) result)
	   (set-cdr! (cdr obj) '())
	   result))
	((evaluated-thunk? obj)
	 (thunk-value obj))
	(else obj)))


					;new version for my-evaluator
				  	;delayed-version
(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
	(aprocs (map analyze (operands exp))))
    (lambda (env)
      (execute-application (fproc env)
			   (list-of-delayed-args aprocs env)))))
(define (execute-application proc args)
  (cond ((primitive-procedure? proc)
	 (apply-primitive-procedure proc
				    (list-of-arg-values args)))
	((compound-procedure? proc)
	 ((procedure-body proc) (extend-environment (procedure-parameters proc)
						    args
						    (procedure-environment proc))))
	(else (error "Unknown procedure type -- EXECUTE-APPLICATION" proc))))
(define (list-of-arg-values thunks)
  (map force-it thunks))
(define (list-of-delayed-args args env)
  (map (lambda (arg)
	 (delay-it arg env))
       args))
(define (force-it obj)
  (if (thunk? obj)
      (force-it (apply (thunk-exp obj) (list (thunk-env obj))))
      obj))
(define (force-it obj)
  (cond ((thunk? obj)
	 ;;force-it到底啊！！
	 (let ((result (force-it (apply (thunk-exp obj) (list (thunk-env obj))))))
	   (set-car! obj 'evaluated-thunk)
	   (set-car! (cdr obj) result)
	   (set-cdr! (cdr obj) '())
	   result))
	((evaluated-thunk? obj)
	 (thunk-value obj))
	(else obj)))
