(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
(define (stream-map proc s)
  (if (stream-null? s)
      the-empty-stream
      (cons-stream (proc (car s)) (stream-map proc (cdr s)))))
(define (stream-for-each proc s)
  (if (not (stream-null? s))
      (begin (proc (stream-car s))
	     (stream-for-each proc (stream-cdr s)))))
(define (display-stream s)
  (stream-for-each display-line
		   s))
(define (display-line x)
  (newline)
  (display x))
(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))

(define (prime? x)
  (define (iter try)
    (cond ((> try (sqrt x)) true)
	  ((= (remainder x try) 0) false)
	  (else (iter (+ try 1)))))
  (if (and (= (remainder (* x 10) 10) 0)
	   (> x 1))
      (iter 2)
      false))
(define (stream-enumerate-interval low high)
  (if (<= low high)
      (cons-stream low
		   (stream-enumerate-interval (+ low 1) high))
      the-empty-stream))
(define (stream-filter pred stream)
  (if (stream-null? stream)
      the-empty-stream
      (if (pred (stream-car stream))
	  (cons-stream (stream-car stream)
		       (stream-filter pred (stream-cdr stream)))
	  (stream-filter pred (stream-cdr stream)))))
					;ex3.50
(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream (apply proc (map stream-car argstreams))
		   (apply stream-map
			  (cons proc (map stream-cdr argstreams))))))
(define the-empty-stream '())
(define (test)
  (let ((s1 (stream-enumerate-interval 1 3))
	(s2 (stream-enumerate-interval 4 6))
	(s3 (stream-enumerate-interval 7 9)))
    (stream-map2 + s1 s2 s3)))
					;ex3.51
(define (show x)
  (display-line x)
  x)
;(define x (stream-map show (stream-enumerate-interval 0 10)))
					;ex3.52
(define (test2)
  (define sum 0)
  (define (accum x)
    (set! sum (+ sum x))
    sum)
  (define seq (stream-map accum (stream-enumerate-interval 1 20)))
  (display-line sum)
  (define y (stream-filter even? seq))
  (display-line sum)
  (define z (stream-filter (lambda (x) (= (remainder x 5) 0))
			   seq))
  (display-line sum)
  (stream-ref y 7)
  (display-line sum)
  ;;(display-stream z)
  (display-line sum))
					;ch3.52
(define (integers-starting-from n)
  (cons-stream n
	       (integers-starting-from (+ n 1))))
(define integers (integers-starting-from 1))
(define (divisible? x y) (= (remainder x y) 0))
(define no-sevens (stream-filter (lambda (x) (not (divisible? x 7)))
				 integers))
(define (fibgen a b)
  (cons-stream a (fibgen b (+ a b))))
(define (sieve stream)
  (cons-stream (stream-car stream)
	       (sieve (stream-filter (lambda (x)
				       (not (divisible? x (stream-car stream))))
				     (stream-cdr stream)))))
(define primes (sieve (integers-starting-from 2)))

(define ones (cons-stream 1 ones))
(define (add-streams s1 s2)
  (stream-map + s1 s2))
(define integers2 (cons-stream 1 (add-streams ones integers2)))
(define fibs (cons-stream 0
			  (cons-stream 1
				       (add-stream fibs
						   (stream-cdr fibs)))))
(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

(define primes (cons-stream 2
			    (stream-filter prime? (integers-starting-from 3))))
(define (prime? n)
  (define (iter ps)
    (cond ((> (square (stream-car ps)) n) true)
	  ((divisible? n (stream-car ps)) false)
	  (else (iter (stream-cdr ps)))))
  (iter primes))
					;ex3.54
(define (mul-streams s1 s2)
  (stream-map * s1 s2))
(define factorials (cons-stream 1 (mul-streams factorials
					       (stream-cdr integers))))
					;ex3.55
(define (partial-sums stream)
  (cons-stream (stream-car stream)
	       (add-streams (partial-sums stream)
			    (stream-cdr stream))))
(define (partial-sums2 stream)
  (define self
    (cons-stream (stream-car stream)
		 (add-streams self
			      (stream-cdr stream))))
  self)
(define sth (partial-sums integers))
	       
					;ex3.56
(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
	((stream-null? s2) s1)
	(else
	 (let ((s1car (stream-car s1))
	       (s2car (stream-car s2)))
	   (cond ((< s1car s2car) (cons-stream s1car (merge (stream-cdr s1) s2)))
		 ((< s2car s1car) (cons-stream s2car (merge (stream-cdr s2) s1)))
		 (else (cons-stream s1car (merge (stream-cdr s1)
						 (stream-cdr s2)))))))))
(define S (cons-stream 1
		       (merge (scale-stream integers 2)
			      (merge (scale-stream integers 3)
				     (scale-stream integers 5)))))
(define (print-stream stream n)
  (if (or (<= n 0) (stream-null? stream))
      'done
      (begin (newline)
	     (display (stream-car stream))
	     (print-stream (stream-cdr stream) (- n 1)))))
					;ex3.59
(define (div-streams s1 s2) (stream-map / s1 s2))
(define (integrate-series s)
  (div-streams s integers))

(define (test3)
  (print-stream (integrate-series (stream-map (lambda (x) (* 2 x))
					      integers))
		5))
					;ch3.53
(define (sqrt-stream x)
  (define (average x y)
    (/ (+ x y) 2))
  (define (sqrt-improve guess)
    (average guess (/ x guess)))
  (define guesses
    (cons-stream 1.0
		 (stream-map (lambda (guess)
			       (sqrt-improve guess))
			     guesses)))
  guesses)
(define (pi-summands n)
  (cons-stream (/ 1.0 n)
	       (stream-map - (pi-summands (+ n 2)))))
(define pi-stream
  (scale-stream (partial-sums (pi-summands 1)) 4))

;;(print-stream pi-stream 10)
(define (euler-transform s)
  (let ((s0 (stream-ref s 0))
	(s1 (stream-ref s 1))
	(s2 (stream-ref s 2)))
    (cons-stream (- s2 (/ (square (- s2 s1))
			  (+ s0 (* -2 s1) s2)))
		 (euler-transform (stream-cdr s)))))
;;(print-stream (euler-transform pi-stream) 10)

(define (make-tableau transform s)
  (cons-stream s
	       (make-tableau transform (transform s))))
(define (accelerated-sequence transform s)
  (stream-map stream-car
	      (make-tableau transform s)))
					;ex3.64
(define (stream-limit s tolerance)
  (if (< (abs (- (stream-car (stream-cdr s))
		 (stream-car s)))
	 tolerance)
      (stream-car (stream-cdr s))
      (stream-limit (stream-cdr s) tolerance)))
(define (sqrt2 x tolerance)
  (stream-limit (sqrt-stream x) tolerance))
					;ex3.65
(define (sth-summands n)
  (cons-stream (/ 1.0 n)
	       ;;(sth-summands (- (+ n 1)))))参数须得是正数不然+1不行
	       (stream-map - (sth-summands (+ n 1)))))
(define sth-stream (partial-sums (sth-summands 1)))
(define result (accelerated-sequence euler-transform sth-stream))
;;s1是无穷流则不行
(define (stream-append s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
		   (stream-append (stream-cdr s1)
				  s2))))
(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
		   (interleave s2
			       (stream-cdr s1)))))
(define (pairs s1 s2)
  (cons-stream (list (stream-car s1)
		     (stream-car s2))
	       (interleave (stream-map (lambda (x)
					 (list (stream-car s1) x))
				       (stream-cdr s2))
			   (pairs (stream-cdr s1)
				  (stream-cdr s2)))))
(define prime-sum-pairs (stream-filter (lambda (pair)
					 (prime? (+ (car pair) (cadr pair))))
				       (pairs integers integers)))
					;ex3.69
(define (triples s1 s2 s3)
  (cons-stream (list (stream-car s1) (stream-car s2) (stream-car s3))
	       (interleave (triples (stream-cdr s1) (stream-cdr s2) (stream-cdr s3))
			   (stream-map (lambda (pair)
					 (cons (stream-car s1) pair))
				       (stream-cdr (pairs s2 s3))))))
(define bidagelasi (stream-filter (lambda (triple)
				    (= (+ (square (car triple))
					  (square (cadr triple)))
				       (square (caddr triple))))
				  (triples integers integers integers)))
					;ex3.70
;;当沿着序对阵列的任何一处向右或向下，权重必须是增加的。这样才能写出weighted-pairs
(define (merge-weighted s1 s2 weight)
  (cond ((stream-null? s1) s2)
	((stream-null? s2) s1)
	(else
	 (let ((pair1 (stream-car s1))
	       (pair2 (stream-car s2)))
	   (cond ((= (weight pair1) (weight pair2))
		  ;;权重相同的序对在这里都应该出现
		  (cons-stream pair1 (merge-weighted s2 (stream-cdr s1) weight)))
		 ((> (weight pair1) (weight pair2))
		  (cons-stream pair2 (merge-weighted s1 (stream-cdr s2) weight)))
		 ((< (weight pair1) (weight pair2))
		  (cons-stream pair1 (merge-weighted s2 (stream-cdr s1) weight))))))))
(define (weighted-pairs s1 s2 weight)
  ;;第一项权重必然最小
  (cons-stream (list (stream-car s1) (stream-car s2))
	       ;;第一个流天然在序对阵列中由左往右排序
	       (merge-weighted (stream-map (lambda (x) (list (stream-car s1) x))
					   (stream-cdr s2))
			       (weighted-pairs (stream-cdr s1)
					       (stream-cdr s2)
					       weight)
			       weight)))
(define a (weighted-pairs integers
			  integers2
			  (lambda (pair)
			    (+ (car pair) (cadr pair)))))
(define b (stream-filter (lambda (pair)
			   (let ((product (* (car pair) (cadr pair))))
			     (and (not (or (= (car pair) 1) (= (cadr pair) 1)))
				  (or (divisible? product 2)
				      (divisible? product 3)
				      (divisible? product 5)))))
			 (weighted-pairs integers2
					 integers
					 (lambda (pair)
					   (+ (* 2 (car pair))
					      (* 3 (cadr pair))
					      (* 5 (car pair) (cadr pair)))))))
(define i235 (stream-filter (lambda (x) (or (divisible? x 2) (divisible? x 3) (divisible? x 5)))
			    integers))
(define b2 (weighted-pairs i235 i235 (lambda (pair)
				       (+ (* 2 (car pair))
					  (* 3 (cadr pair))
					  (* 5 (car pair) (cadr pair))))))
					;ex3.71
(define (cube x) (* x x x))
(define (sum-of-cubes pair) (+ (cube (car pair)) (cube (cadr pair)))) 
(define (search-ramanujan s)
  (let ((data (stream-car s))
	(next (stream-car (stream-cdr s))))
    (if (= (sum-of-cubes data)
	   (sum-of-cubes next))
	(cons-stream (list (sum-of-cubes data) data next)
		     (search-ramanujan (stream-cdr s)))
	(search-ramanujan (stream-cdr s)))))
(define ramanujan (search-ramanujan (weighted-pairs integers2 integers2 sum-of-cubes)))
					;ex3.72
(define (sum-of-squares pair)
  (+ (square (car pair)) (square (cadr pair))))
(define (search-this-shit s)
  (let ((data (stream-car s))
	(next (stream-car (stream-cdr s)))
	(nnext (stream-car (stream-cdr (stream-cdr s)))))
    (if (= (sum-of-squares data) (sum-of-squares next) (sum-of-squares nnext))
	(cons-stream (list (sum-of-squares data) data next nnext)
		     (search-this-shit (stream-cdr s)))
	(search-this-shit (stream-cdr s)))))
(define shit (search-this-shit (weighted-pairs integers integers sum-of-squares)))
;;(print-stream shit 10) 
	
					;ex3.73
(define (integral integrand initial-value dt)
  (define int
    (cons-stream initial-value
		 (add-streams (scale-stream integrand dt)
			      int)))
  int)
(define (RC r c dt)
  (lambda (i v)
    (add-streams (scale-stream i r)
		 (integral (scale-stream i (/ 1 c))
			   v
			   dt))))
					;ex3.74
(define sense-data (stream-map (lambda (x) (- x 5)) integers))
(define (sign-change-detector a b)
  (cond ((and (> a 0) (< b 0))
	 1)
	((and (< a 0) (> b 0))
	 -1)
	(else 0)))
(define (make-zero-crossings input-stream last-value)
  (cons-stream (sign-change-detector (stream-car input-stream) last-value)
	       (make-zero-crossings (stream-cdr input-stream)
				    (stream-car input-stream))))
(define zero-crossings (make-zero-crossings sense-data 0))

(define zero-crossings2 (stream-map sign-change-detector
				    sense-data
				    (cons-stream 0 sense-data)))
					;ex3.75
(define (make-zero-crossings2 input-stream last-value last-raw-value)
  (let ((avpt (/ (+ last-raw-value (stream-car input-stream)) 2)))
    (cons-stream (sign-change-detector avpt last-value)
		 (make-zero-crossing2 (stream-cdr input-stream)
				      avpt
				      (stream-car input-stream)))))
					;ex3.76
(define (stream-cadr s) (stream-car (stream-cdr s)))
(define (smooth input)
  (cons-stream (/ (+ (stream-car input) (stream-cadr input)) 2)
	       (smooth (stream-cdr input))))
(define (smooth2 input)
  (stream-map (lambda (x y) (/ (+ x y) 2))
	      input
	      (stream-cdr input)))
(define (make-zero-crossings3 input-stream)
  (make-zero-crossings (smooth input-stream) 0))
(define (make-zero-crossings4 input-stream)
  (let ((smooth-input (smooth2 input-stream)))
    (stream-map sign-change-detector
		(stream-cdr smooth-input)
		input)))
					;ch3.5.4

(define (integral delayed-integrand initial-value dt)
  (define int
    (cons-stream initial-value
		 (let ((integrand (force delayed-integrand)))
		   (add-streams (scale-stream integrand dt)
				int))))
  int)
(define (solve f y0 dt)
  (define y (integral (delay dy) y0 dt))
  (define dy (stream-map f y))
  y)
					;ex3.77
(define (integral2 delayed-integrand initial-value dt)
  (cons-stream initial-value
	       (let ((integrand (force delayed-integrand)))
		 (if (stream-null? integrand)
		     the-empty-stream
		     (integral2 (delay (stream-cdr integrand))
				(+ (* (stream-car integrand) dt)
				   initial-value)
				dt)))))
					;ex3.78
(define (solve-2nd a b dt y0 dy0 dydt)
  (define y (integral (delay dy) y0 dt))
  (define dy (integral (delay ddy) dy0 dt))
  (define ddy (add-streams (scale-stream dy a)
			   (scale-stream y b)))
  y)
					;ex3.80
(define (rlc r l c dt)
  (lambda (vc0 il0)
    (define vc (integral2 (delay dvc) vc0 dt))
    (define il (integral2 (delay dil) il0 dt))
    (define dvc (scale-stream il (- (/ 1 c))))
    (define dil (add-streams (scale-stream vc (/ 1 l))
			     (scale-stream il (- (/ r l)))))
    (stream-map cons vc il)))
(define test80 ((rlc 1 1 0.2 0.1) 10 0))
;;(print-stream test80 10)
					;ch3.5.5
(define random-init 1)
(define (rand-update x)
  (remainder (+ (* x 13) 5) 24))
(define random-numbers (cons-stream random-init
				    (stream-map rand-update random-numbers)))

(define (map-successive-pairs f s)
  (cons-stream (f (stream-car s) (stream-car (stream-cdr s)))
	       (map-successive-pairs f (stream-cdr (stream-cdr s)))))
(define cesaro-stream
  (map-successive-pairs (lambda (r1 r2)
			  (= (gcd r1 r2) 1))
			random-numbers))
(define (monte-carlo experiment-stream passed failed)
  (define (next passed failed)
    (cons-stream (/ passed (+ passed failed))
		 (monte-carlo (stream-cdr experiment-stream)
			      passed
			      failed)))
  (if (stream-car experiment-stream)
      (next (+ passed 1) failed)
      (next passed (+ failed 1))))
(define pi (stream-map (lambda (p) (sqrt (/ 6 p)))
		       (monte-carlo cesaro-stream 0 0)))
					;ex3.81
(define (rand input-s)
  (define (next orders last-value)
    (let ((order (stream-car orders)))
      (cond ((= order 'generate)
	     (cons-stream (rand-update last-value)
			  (next (stream-cdr input-s) (rand-update last-value))))
	    ((and (pair? order) (= (car order) 'reset))
	     (cons-stream (cdr order)
			  (next (stream-cdr input-s) (cdr order))))
	    (else (error "wrong message." order)))))
  (next input-s random-init))
(define (rand2 orders)
  (define rands
    (cons-stream random-init
		 (stream-map (lambda (num order)
			       (cond ((= order 'generate)
				      (rand-update num))
				     ((and (pair? order) (= (car order) 'reset))
				      (cdr order))
				     (else (error "wrong message." order))))
			     rands
			     orders)))
  (stream-cdr rands))
					;ex3.82
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (estimate-integral p x1 x2 y1 y2)
  (define (test-stream)
    (cons-stream (p (random-in-range x1 x2)
		    (random-in-range y1 y2))
		 (test-stream)))
  (let ((area (* (abs (- x2 x1)) (abs (- x2 x1)))))
    (stream-map (lambda (x) (* x area))
		(monte-carlo (test-stream) 0 0))))
(define pi
  (estimate-integral (lambda (x y)
		       (< (+ (square x) (square y)) 1))
		     -1.0 1.0 -1.0 1.0))
