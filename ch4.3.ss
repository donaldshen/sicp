(define (prime-sum-pair l1 l2)
  (let ((a (an-element-of l1))
	(b (an-element-of l2)))
    (require (prime? (+ a b)))
    (list a b)))
					;ch4.3.1
(define (require p)
  (if (not p)
      (amb)))
(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items)
       (an-element-of (cdr items))))
(define (an-integer-start-from n)
  (amb n (an-anteger-start-from (+ n 1))))
					;ex4.35
(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high)))
    (let ((j (an-integer-between i high)))
      (let ((k (an-integer-between j high)))
	(require (= (+ (* i i) (* j j)) (* k k)))
	(list i j k)))))
(define (an-integer-between low high)
  (require (< low high))
  (amb low (an-integer-between (+ low 1) high)))
					;ex4.36
(define (all-pythagorean-triples-greater-than low)
  (let ((high (an-integer-start-from low)))
    (a-pythagorean-triple-between low high)))
					;ex4.37
(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high))
	(hsq (* high high)))
    (let ((j (an-integer-between i high)))
      (let ((ksq (+ (* i i) (* j j))))
	(require (>= hsq ksq))
	(let ((k (sqrt ksq)))
	  (require (integer? k))
	  (list i j k))))))
					;ch4.3.2
(define (distinct? items)
  (cond ((null? items) true)
	((null? (cdr items)) true)
	((member (car items) (cdr items)) false)
	(else (distinct? (cdr items)))))
(define (member i lst)
  (cond ((null? lst)
	 false)
	((eq? i (car lst))
	 true)
	(else (member i (cdr lst)))))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
	(cooper (amb 1 2 3 4 5))
	(fletcher (amb 1 2 3 4 5))
	(miller (amb 1 2 3 4 5))
	(smith (amb 1 2 3 4 5)))
    (require (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (> miller cooper))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)
	  (list 'cooper cooper)
	  (list 'fletcher fletcher)
	  (list 'miller miller)
	  (list 'smith smith))))
					;ex4.39
(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
	(cooper (amb 1 2 3 4 5))
	(fletcher (amb 1 2 3 4 5))
	(miller (amb 1 2 3 4 5))
	(smith (amb 1 2 3 4 5)))

    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    
    (require (> miller cooper))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (require (distinct? (list baker cooper fletcher miller smith)))
    (list (list 'baker baker)
	  (list 'cooper cooper)
	  (list 'fletcher fletcher)
	  (list 'miller miller)
	  (list 'smith smith))))
					;ex4.40
(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4)))
    (let ((cooper (amb 2 3 4 5)))
      (require (distinct? (list baker cooper)))
      (let ((miller (amb 3 4 5)))
	(require (> miller cooper))
	(require (distinct? (list miller baker)))
	(let ((fletcher (amb 2 3 4)))
	  (require (distinct? (list fletcher baker)))
	  (require (distinct? (list fletcher miller)))
	  (require (distinct? (list fletcher cooper)))
	  (require (not (= (abs (- fletcher cooper)) 1)))
	  (let ((smith (amb 1 2 3 4 5)))
	    (require (not (= (abs (- smith fletcher)) 1)))
	    (require (distinct? (list smith baker)))
	    (require (distinct? (list smith cooper)))
	    (require (distinct? (list smith miller)))
	    (require (distinct? (list smith fletcher)))
	    (list (list 'baker baker)
		  (list 'cooper cooper)
		  (list 'fletcher fletcher)
		  (list 'miller miller)
		  (list 'smith smith))))))))
					;ex4.41
(define (multiple-dwelling)
  (define (iter-b b)
    (define (iter-c c)
      (define (iter-m m)
	(define (iter-f f)
	  (define (iter-s s)
	    (cond ((or (= s b) (= s c) (= s m) (= s f) (= (abs (- s f)) 1))
		   (iter-s (+ s 1)))
		  ((> s 5)
		   false)
		  (else (list (list 'smith s)))))
	  (cond ((or (= f b) (= f c) (= f m) (= (abs (- f c)) 1))
		 (iter-f (+ f 1)))
		((> f 4)
		 false)
		(else (let ((s (iter-s 1)))
			(if s
			    (cons (list 'fletcher f) s)
			    (iter-f (+ f 1)))))))
	(cond ((or (= m b) (<= m c))
	       (iter-m (+ m 1)))
	      ((> m 5)
	       false)
	      (else (let ((f (iter-f 2)))
		      (if f
			  (cons (list 'miller m) f)
			  (iter-m (+ m 1)))))))
      (cond ((= c b)
	     (iter-c (+ c 1)))
	    ((> c 5)
	     false)
	    (else (let ((m (iter-m 3)))
		    (if m
			(cons (list 'cooper c) m)
			(iter-c (+ c 1)))))))
    (cond ((> b 4)
	   'end)
	  (else (let ((c (iter-c 2)))
		  (if c
		      (cons (list 'baker b) c)
		      (iter-b (+ b 1)))))))
  (iter-b 1))

;; (define (mutiple-dwelling)
;;   (let ((result '())
;; 	(b-min 1)
;; 	(b-max 4)
;; 	(c-min 2)
;; 	(c-max 5)
;; 	(m-min 3)
;; 	(m-max 5)
;; 	(f-min 2)
;; 	(f-max 4)
;; 	(s-min 1)
;; 	(s-max 5))
;;     (define (iter b c m f s)
;;       (cond ((> b b-max)
;; 	     result)
;; 	    ((= c b)
;; 	     (iter b (+ c 1) m-min f-min s-min))
;; 	    ((> c c-max)
;; 	     (iter (+ b 1) c-min m-min f-min s-min))
;; 	    ((or (<= m c) (= m b))
;; 	     (iter b c (+ m 1) f-min s-min))
;; 	    ((> m m-max)
;; 	     (iter b (+ c 1) m-min f-min s-min))
;; 	    ((>

(define (multiple-dwelling)
  (let ((result '()))
    (define (iter-b b)
      (define (iter-c c)
	(define (iter-m m)
	  (define (iter-f f)
	    (define (iter-s s)
	      (cond ((or (= s b) (= s c) (= s m) (= s f) (= (abs (- s f)) 1))
		     (iter-s (+ s 1)))
		    ((> s 5)
		     (iter-f (+ f 1)))
		    (else (set! result
				(cons (list (list 'baker b)
					    (list 'cooper c)
					    (list 'miller m)
					    (list 'fletcher f)
					    (list 'smith s))
				      result))
			  (iter-s (+ s 1)))))
	    (cond ((or (= f b) (= f c) (= f m) (= (abs (- f c)) 1))
		   (iter-f (+ f 1)))
		  ((> f 4)
		   (iter-m (+ m 1)))
		  (else (iter-s 1))))
	  (cond ((or (= m b) (<= m c))
		 (iter-m (+ m 1)))
		((> m 5)
		 (iter-c (+ c 1)))
		(else (iter-f 2))))
	(cond ((= c b)
	       (iter-c (+ c 1)))
	      ((> c 5)
	       (iter-b (+ b 1)))
	      (else (iter-m 3))))
      (cond ((> b 4)
	     result)
	    (else (iter-c 2))))
    (iter-b 1)))
					;ex4.42
(define (actual-order)
  (let ((b (amb 1 2 3 4 5))
	(e (amb 1 2 3 4 5))
	(j (amb 1 2 3 4 5))
	(k (amb 1 2 3 4 5))
	(m (amb 1 2 3 4 5)))
    (require (or (and (= k 2) (not (= b 3)))
		 (and (not (= k 2)) (= b 3))))
    (require (or (and (= e 1) (not (= j 2)))
		 (and (not (= e 1)) (= j 2))))
    (require (or (and (= j 3) (not (= e 5)))
		 (and (not (= j 3)) (= e 5))))
    (require (or (and (= k 2) (not (= m 4)))
		 (and (not (= k 2)) (= m 4))))
    (require (or (and (= m 4) (not (= b 1)))
		 (and (not (= m 4)) (= b 1))))
    (require (distinct? (list b e j k m)))
    (list (list 'betty b)
	  (list 'ethel e)
	  (list 'jone j)
	  (list 'kitty k)
	  (list 'mary m))))

(define (pass? p)
  (let ((b (car p))
	(e (list-ref p 1))
	(j (list-ref p 2))
	(k (list-ref p 3))
	(m (list-ref p 4)))
    (and (or (and (= k 2) (not (= b 3)))
	     (and (not (= k 2)) (= b 3)))
	 (or (and (= e 1) (not (= j 2)))
	     (and (not (= e 1)) (= j 2)))
	 (or (and (= j 3) (not (= e 5)))
	     (and (not (= j 3)) (= e 5)))
	 (or (and (= k 2) (not (= m 4)))
	     (and (not (= k 2)) (= m 4)))
	 (or (and (= m 4) (not (= b 1)))
	     (and (not (= m 4)) (= b 1))))))
(define (extract item lst)
  (define (scan items)
    (cond ((null? items)
	   '())
	  ((equal? item (car items))
	   (scan (cdr items)))
	  (else (cons (car items) (scan (cdr items))))))
  (scan lst))
(define (permutations l)
  (cond ((null? (cdr l))
	 (list l))
	(else
	 (flatmap (lambda (item)
		    (map (lambda (p)
			   (cons item p))
			 (permutations (extract item l))))
		  l))))
(define (flatmap proc lst)
  (if (null? lst)
      '()
      (append (proc (car lst))
	      (flatmap proc (cdr lst)))))
(define (actual-order)
  ((lambda (l)
     (list (list 'betty (list-ref l 0))
	   (list 'ethel (list-ref l 1))
	   (list 'jone (list-ref l 2))
	   (list 'ketty (list-ref l 3))
	   (list 'mary (list-ref l 4))))
   (car (filter pass? (permutations '(1 2 3 4 5))))))
					;ex4.43
(define fathers '((mr.moore lorna)
		  (colonel-downing melissa)
		  (mr.hall rosalind)
		  (sir-barnacle gabrielle)
		  (dr.parker mary-ann-moore)))
(define girls '(mary-ann-moore gabrielle lorna rosalind melissa))
(define (amb-lst lst)
  (require (not (null? lst)))
  (amb (car lst) (amb-lst (cdr lst))))
(define (name f) (car f))
(define (girl f) (caddr f))
(define (boat f) (cadr f))
(define (familys)
  (let ((m.m (append (car fathers) (amb-lst girls)))
	(c-d (append (list-ref fathers 1) (amb-lst girls)))
	(m.h (append (list-ref fathers 2) (amb-lst girls)))
	(s-b (append (list-ref fathers 3) (amb-lst girls)))
	(d.p (append (list-ref fathers 4) (amb-lst girls))))
    (require (eq? 'mary-ann-moore (girl m.m)))
    (require (not (eq? (girl m.h) (boat m.h))))
    (require (not (eq? (boat c-d) (girl c-d))))
    (require (eq? (girl s-b) 'melissa))
    (require (eq? (boat (car (filter (lambda (f)
				       (eq? 'gabrielle (girl f)))
				     (list m.m c-d m.h s-b d.p))))
		  (girl d.p)))
    (name (car (filter (lambda (f)
			 (eq? 'lorna (girl f)))
		       (list m.m c-d m.h s-b d.p))))))
(define (familys)
  (let ((m.m (append 'mr.moore 'lorna (amb-lst girls))))
    (require (eq? 'mary-ann-moore (girl m.m)))
    (let ((s-b (append 'sir-barnacle 'gabrielle (amb-lst girls))))
      (require (eq? (girl s-b) 'melissa))
      (let ((c-d (append 'colonel-downing 'mellisa (amb-lst girls))))
	(require (not (eq? (boat c-d) (girl c-d))))
	(let ((m.h (append 'mr.hall 'rosallind (amb-lst girls))))
	  (require (not (eq? (girl m.h) (boat m.h))))
	  (let ((d.p (append 'dr.parker 'mary-ann-moore (amb-lst girls))))
	    (require (eq? (boat (car (filter (lambda (f)
					       (eq? 'gabrielle (girl f)))
					     (list m.m c-d m.h s-b d.p))))
			  (girl d.p)))
	    (name (car (filter (lambda (f)
				 (eq? 'lorna (girl f)))
			       (list m.m c-d m.h s-b d.p))))))))))

(define (pass-f? p)
  (let ((m.m (car p))
	(c-d (list-ref p 1))
	(m.h (list-ref p 2))
	(s-b (list-ref p 3))
	(d.p (list-ref p 4)))
    (and (not (eq? (boat m.m) (girl m.m)))
	 ;;(eq? 'mary-ann-moore (girl m.m))
	 (eq? 'melissa (girl s-b))
	 (not (eq? (boat m.h) (girl m.h)))
	 (not (eq? (boat c-d) (girl c-d)))
	 (eq? (boat (car (filter (lambda (f)
				   (eq? 'gabrielle (girl f)))
				 (list m.m c-d m.h s-b d.p))))
	      (girl d.p)))))
(define (familys)
  (filter pass-f?
	  (map (lambda (girls)
		 (map (lambda (father girl)
			(append father (list girl)))
		      fathers
		      girls))
	       (permutations girls))))
(define (display-f)
  (map (lambda (f)
	 (newline)
	 (display f)
	 (newline))
       (familys)))
					;ex4.44
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
	(list empty-board)
	(filter (lambda (positions)
		  (safe? k positions))
		(flatmap (lambda (rest-of-queens)
			   (map (lambda (new-row)
				  (adjoin-position new-row k rest-of-queens))
				(enumerate-interval 1 board-size)))
			 (queen-cols (- k 1))))))
  (queen-cols board-size))
(define (enumerate-interval l h)
  (if (> l h)
      '()
      (cons l (enumerate-interval (+ l 1) h))))
(define empty-board '())
(define (adjoin-position row col rest)
  (cons (list row col) rest))
(define (safe? col positions)
  (define (iter l)
    (if (null? l)
	true
	(and (car l) (iter (cdr l)))))
  (let ((row (caar (filter (lambda (p)
			     (eq? col (cadr p)))
			   positions))))
    (iter (map (lambda (p)
		 (not (or (eq? row (car p))
			  (eq? (- row col) (- (car p) (cadr p)))
			  (eq? (+ row col) (+ (car p) (cadr p))))))
	       (extract (list row col) positions)))))
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
	(list empty-board)
	(map (lambda (positions)
	       (require (safe? k positions)))
	     (flatmap (lambda (rest-of-queens)
			(adjoin-position new-row
					 (amb-lst (enumerate-interval 1 board-size))
					 rest-of-queens))
		      (queen-cols (- k 1))))))
  (queen-cols board-size))

(define nouns '(noun student professor cat class))
(define verbs '(verb studies lectures eats sleeps))
(define articles '(article the a))
(define (parse-sentense)
  (list 'sentence
	(parse-noun-phrase)
	(parse-verb-phrase)))
(define (parse-simple-noun-phrase)
  (list 'simple-noun-phrase
	(parse-word articles)
	(parse-word nouns)))
(define (parse-word word-list)
  (require (not (null? *unparsed*)))
  (require (memq (car *unparsed*) (cdr word-list)))
  (let ((found-word (car *unparsed*)))
    (set! *unparsed* (cdr *unparsed*))
    (list (car word-list) found-word)))

(define *unparsed* '())
(define (parse input)
  (set! *unparsed* input)
  (let ((sent (parse-sentence)))
    (require (null? *unparsed*))
    sent))

(define prepositions '(prep for to in by with))
(define (parse-prepositional-phrase)
  (list 'prepositional-phrase
	(parse-word prepositions)
	(parse-noun-phrase)))
(define (parse-verb-phrase)
  (define (maybe-extend verb-phrase)
    (amb verb-phrase
	 (maybe-extend (list 'verb-phrase
			     verb-phrase
			     (parse-prepositional-phrase)))))
  (maybe-extend (parse-word verbs)))
(define (parse-noun-phrase)
  (define (maybe-extend noun-phrase)
    (amb noun-phrase
	 (maybe-extend (list 'noun-phrase
			     noun-phrase
			     (parse-prepositional-phrase)))))
  (maybe-extend (parse-simple-noun-phrase)))
					;ex4.49
(define (parse-word2 word-list)
  (require (not (null? *unparsed*)))
  (set! *unparsed* (cdr *unparsed*))
  (list (car word-list) (amb-lst (cdr word-list))))
					;ch4.3.3
(define (amb? exp)
  (tagged-list? exp 'amb))
(define (amb-choices exp)
  (cdr exp))
(define (ambeval exp env succeed fail)
  ((analyze exp) env succeed fail))
(define (analyze-self-evaluating exp)
  (lambda (env succeed fail)
    (succeed exp fail)))
(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (lambda (env succeed fail)
      (succeed qval fail))))
(define (analyze-variable exp)
  (lambda (env succeed fail)
    (succeed (lookup-variable-value exp env)
	     fail)))
(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
	(bproc (analyze-sequence (lambda-body exp))))
    (lambda (env succeed fail)
      (succeed (make-procedure vars bproc env)
	       fail))))
(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
	(cproc (analyze (if-consequent exp)))
	(aproc (analyze (if-alternative exp))))
    (lambda (env succeed fail)
      (pproc env
	     (lambda (pred-value fail2)
	       (if (true? pred-value)
		   (cproc env succeed fail2)
		   (aproc env succeed fail2)))
	     fail))))
(define (analyze-sequence exps)
  (define (sequentially a b)
    (lambda (env succeed fail)
      (a env
	 (lambda (a-value fail2)
	   (b env succeed fail2))
	 fail)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
	first-proc
	(loop (sequentially first-proc (car rest-procs))
	      (cdr rest-procs))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
	(error "Empty sequence -- ANALYZE"))
    (loop (car procs) (cdr procs))))
(define (analyze-definition exp)
  (let ((var (definition-variable exp))
	(vproc (analyze (definition-value exp))))
    (lambda (env succeed fail)
      (vproc env
	     (lambda (val fail2)
	       (define-variable! var val env)
	       (succeed 'definition-done fail2))
	     fail))))
(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
	(vproc (analyze (assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
	     (lambda (val fail2)
	       (let ((old-value (lookup-variable-value var env)))
		 (set-variable-value! var (vproc env) env)
		 (succeed 'assignment-done
			  (lambda ()
			    (set-variable-value! var old-value env)
			    (fail2)))))
	     fail))))
(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
	(aprocs (map analyze (operands exp))))
    (lambda (env succeed fail)
      (fproc env
	     (lambda (proc fail2)
	       (get-args aprocs
			 env
			 (lambda (args fail3)
			   (execute-application proc
						args
						succeed
						fail3))
			 fail2))
	     fail))))
(define (get-args aprocs env succeed fail)
  (if (null? aprocs)
      (succeed '() fail)
      ((car aprocs)
       env
       (lambda (arg fail2)
	 (get-args (cdr aprocs)
		   env
		   (lambda (args fail3)
		     (succeed (cons arg args)
			      fail3))
		   fail2))
       fail)))
(define (execute-application proc args succeed fail)
  (cond ((primitive-procedure? proc)
	 (succeed (apply-primitive-procedure proc args)
		  fail))
	((compound-procedure? proc)
	 ((procedure-body proc)
	  (extend-environment (procedure-parameters proc)
			      args
			      (procedure-environment proc))
	  succeed
	  fail))
	(else (error "Unknown procedure type -- EXECUTE-APPLICATION" proc))))
(define (analyze-amb exp)
  (let ((cprocs (map analyze (amb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
	(if (null? choices)
	    (fail)
	    ((car choices)
	     env
	     succeed
	     (lambda ()
	       (try-next (cdr choices))))))
      (try-next cprocs))))
(define input-prompt ";;; Amb-Eval input:")
(define output-prompt ";;; Amb-Eval value:")
(define (driver-loop)
  (define (internal-loop try-again)
    (prompt-for-input input-prompt)
    (let ((input (read)))
      (if (eq? input 'try-again)
	  (try-again)
	  (begin (newline)
		 (display ";;; Starting a new problem ")
		 (ambeval input
			  the-global
			  (lambda (val next-alternative)
			    (announce-output output-prompt)
			    (user-print val)
			    (internal-loop next-alternative))
			  (lambda ()
			    (announce-output ";;; There are no more values of")
			    (user-print input)
			    (driver-loop)))))))
  (internal-loop (lambda ()
		   (newline)
		   (display ";;; There is no current problem")
		   (driver-loop))))
